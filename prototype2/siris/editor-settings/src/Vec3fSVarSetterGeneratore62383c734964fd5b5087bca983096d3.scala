//AutoGenerated Begin
//DO NOT EDIT!
package siris.components.editor.gui

import scala.swing._
import simplex3d.math.floatm.Vec3f

class Vec3fSVarSetterGeneratore62383c734964fd5b5087bca983096d3 extends SVarSetterGenerator[Vec3f] {

  def generate: SVarSetter[Vec3f] = new SVarSetter[Vec3f] {

//AutoGenerated END
//Put your code below

    val xLabel = new Label("x")
    val yLabel = new Label("y")
    val zLabel = new Label("z")

    val posX = new TextField(){enabled = false}
    val posY = new TextField(){enabled = false}
    val posZ = new TextField(){enabled = false}

    var initialized = false



    /**
     *  The scala.swing.Component that visualizes the SVar setter.
     *  Call
     *  setSvar(newValue: ConstVec3f): Unit
     *  to set new svar value.
     */
    //Todo: Implement yourself!
    val component = new BoxPanel(Orientation.Horizontal){
      contents += xLabel
      contents += posX
      contents += yLabel
      contents += posY
      contents += zLabel
      contents += posZ

      listenTo(posX, posY, posZ)

      reactions += {
        case event.EditDone(src) if((src == posX) || (src == posY) || (src == posZ)) => setTheSvar
      }
    }

    private def setTheSvar() {
      try {
        if(initialized)
          setSvar(Vec3f(posX.text.toFloat, posY.text.toFloat, posZ.text.toFloat))
      } catch {
        case e => println(e)
      }
    }

    /**
     * Override update if you want to use the current value of the SVar.
     * This function is initially called once and then every time the value of the SVar changes.
     */
    override def update(newValue: Vec3f): Unit = {
      if(!initialized) {

        posX.text = newValue.x.toString
        posY.text = newValue.y.toString
        posZ.text = newValue.z.toString

        posX.enabled = true
        posY.enabled = true
        posZ.enabled = true

        initialized = true
      }
    }

  }

  /**
   *  The name of this visualizer.
   *  This must not be unique.
   */
  //Todo: Name it!
  val name: String = "Vec3f Setter"

}