//AutoGenerated Begin
//DO NOT EDIT!
package siris.components.editor.gui

import scala.swing._
import de.bht.jvr.core.Texture2D
import javax.swing.ImageIcon
import java.awt.image.BufferedImage

class Texture2DSVarViewGeneratorac41fa3246ad44f59490ef853361102c extends SVarViewGenerator[Texture2D] {

  def generate: SVarView[Texture2D] = new SVarView[Texture2D] {
    //AutoGenerated END

    val component = new Label()

    /**
     * This function is called whenever the visualized value changes.
     * It should update component accordingly.
     */
    def update(sVarValue: Texture2D) {
      component.icon = new ImageIcon(byteArrayToBufferedImage(sVarValue.getImageData, sVarValue.getWidth, sVarValue.getHeight))
      component.tooltip = "Image resolution: " + sVarValue.getWidth + "x" + sVarValue.getHeight
      component.repaint()
    }

  }

  /**
   * The name of this visualizer.
   * This must not be unique.
   */
  val name: String = "Texture2D View"

  /**
   * byte array to BufferedImage creates an Buffered Image of size width*height from a byte array
   * @param imageInByte: byte array with {r1, g1, b1, r2, g2, b2, ... }
   * @param width width of the image in pixel
   * @param height height of the image in pixel
   * @return BufferedImage
   */
  def byteArrayToBufferedImage(imageInByte: Array[Byte], width: Int, height: Int): BufferedImage = {
    val bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)
    var x = 0
    var y = 0
    for (i <- 0 to imageInByte.length - 1 by 3) {
      // alpha, red, green, blue
      val rgb =
        ((255 & 0xFF) << 24) |
          ((imageInByte(i) & 0xFF) << 16) |
          ((imageInByte(i + 1) & 0xFF) << 8) |
          ((imageInByte(i + 2) & 0xFF) << 0)
      bi.setRGB(x, y, rgb)
      if (x < width - 1) {
        x = x + 1
      }
      else {
        x = 0
        y = y + 1
      }
    }
    bi
  }
}