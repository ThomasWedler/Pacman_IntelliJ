//AutoGenerated Begin
//DO NOT EDIT!
package siris.components.editor.gui

import scala.swing._
import event.SelectionChanged
import simplex3d.math.floatm.{Vec3f, Mat4f}
import simplex3d.math.floatm.Vec3f._
import collection.immutable.Nil
import java.awt.{Dimension, Color}

class Mat4fSVarViewGeneratorded9e79cfaca4a538cccf7da1b972311 extends SVarViewGenerator[Mat4f] {

  def generate: SVarView[Mat4f] = new SVarView[Mat4f] {

//AutoGenerated END
//Put your code below

    val max = 500
    val data = new Array[Vec3f](max)

    for(i <- 0 until max) data(i) = Vec3f(0,0,0)

    var curr = 0

    var extract = (v: Vec3f) => {v.x.toInt}

    /**
     *  The scala.swing.Component that visualizes the value.
     */
    //Todo: Implement yourself!

    val cb = new siris.components.editor.gui.AdvComboBox[String]("X" :: "Y" :: "Z" :: Nil) {
      listenTo(this)

      reactions += {
        case SelectionChanged(source) if(source == this) =>
          selection.item match {
            case "X" => extract = (v: Vec3f) => {v.x.toInt}
            case "Y" => extract = (v: Vec3f) => {v.y.toInt}
            case "Z" => extract = (v: Vec3f) => {v.z.toInt}
            case _ => {}
          }
      }
    }

    val l = new Label {

      minimumSize = new Dimension(max, 300)
      preferredSize = new Dimension(max, 300)
      maximumSize = new Dimension(max, 300)
      override def paint(g: Graphics2D) {
        super.paint(g)

        g.setColor(Color.white)
        g.fillRect(0, 0, max, 300)

        g.setColor(Color.BLACK)
        g.drawString("-100", 500, 255)
        g.drawString("0", 500, 155)
        g.drawString("100", 500, 55)


        for(i <- 0 until max){
          val pos = (curr + i) % max
          g.drawOval(i, (150 - extract(data(pos))), 1, 1)
        }
      }
    }

    val component = new GridBagPanel() {

      val gbc = new Constraints()
      gbc.fill = GridBagPanel.Fill.Both
      gbc.gridy = 0
      gbc.gridx = 0
      gbc.weighty = 1.0
      gbc.weightx = 1.0
      add(l, gbc)
      gbc.gridy = 1
      gbc.weighty = 0.0
      add(cb, gbc)
    }

    /**
      *  This function is called whenever the visualized value changes.
      *  It should update component accordingly.
      */
    //Todo: Implement yourself!
    def update(sVarValue: Mat4f) {
      data(curr) = Vec3f(sVarValue.m03, sVarValue.m13, sVarValue.m23)
      curr = (curr + 1) % max
      l.repaint
    }

  }

  /**
   *  The name of this visualizer.
   *  This must not be unique.
   */
  //Todo: Name it!
  val name: String = "Histogram View"

}